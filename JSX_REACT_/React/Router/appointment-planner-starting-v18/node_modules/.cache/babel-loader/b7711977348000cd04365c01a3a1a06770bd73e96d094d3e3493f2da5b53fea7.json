{"ast":null,"code":"var _jsxFileName = \"/Users/antonio/Desktop/codecademy/helloJavaScript/JSX_REACT_/React/Router/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    newContact\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n  console.log(contacts);\n  const checkDuplicate = (data, value) => {\n    // !! convert in bool\n    return !!data.find(dupl => dupl.name === value);\n  };\n  useEffect(() => {\n    if (name !== '') {\n      if (checkDuplicate(contacts, name)) {\n        setDuplicate(true);\n      } else {\n        setDuplicate(false);\n      }\n    }\n  }, [name]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (duplicate) {\n      return;\n    }\n    newContact(name, phone, email);\n\n    //is this correct to clear data?\n    setName('');\n    setPhone('');\n    setEmail('');\n\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name,\n        phone,\n        email,\n        setEmail,\n        setName,\n        setPhone,\n        handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tileData: [{\n          name: 'Test',\n          rest: 'rest of'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"vNkYol+xC/T7uxd5kzXSdoj6AbM=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","newContact","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","console","log","checkDuplicate","data","value","find","dupl","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","tileData","rest","_c","$RefreshReg$"],"sources":["/Users/antonio/Desktop/codecademy/helloJavaScript/JSX_REACT_/React/Router/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, newContact}) => {\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  console.log(contacts);\r\n\r\n\r\n\r\n  const checkDuplicate = (data, value)=>{\r\n    // !! convert in bool\r\n   return !!data.find((dupl)=> dupl.name === value )\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if(name !== ''){\r\n      if(checkDuplicate(contacts, name)){\r\n          setDuplicate(true);\r\n      }\r\n      else{\r\n        setDuplicate(false);\r\n      }\r\n    }\r\n\r\n  }, [name]);\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(duplicate)\r\n      {return}\r\n\r\n    newContact(name, phone, email)\r\n\r\n    //is this correct to clear data?\r\n    setName('');\r\n    setPhone('');\r\n    setEmail('');\r\n\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm {...{name, phone, email, setEmail, setName, setPhone, handleSubmit}}/>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tileData={[{name:'Test',rest:'rest of'}]} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}