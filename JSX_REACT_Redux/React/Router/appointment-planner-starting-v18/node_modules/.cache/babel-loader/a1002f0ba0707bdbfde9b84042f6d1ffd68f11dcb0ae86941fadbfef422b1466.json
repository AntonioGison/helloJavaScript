{"ast":null,"code":"var _jsxFileName = \"/Users/antonio/Desktop/codecademy/helloJavaScript/JSX_REACT_/React/Router/appointment-planner-starting-v18/src/components/tile/Tile.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tile = (name, description) => {\n  return (\n    /*#__PURE__*/\n    //Render a <p> element with the name prop. Give this element a className of \"tile-title\"\n    _jsxDEV(\"div\", {\n      className: \"tile-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tile-title\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }, this), Object.values(description).map((value, index) => {\n        /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Tile;\nvar _c;\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Tile","name","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","values","map","value","index","_c","$RefreshReg$"],"sources":["/Users/antonio/Desktop/codecademy/helloJavaScript/JSX_REACT_/React/Router/appointment-planner-starting-v18/src/components/tile/Tile.js"],"sourcesContent":["import React from \"react\";\r\n\r\nexport const Tile = (name, description) => {\r\n  return (\r\n\r\n    //Render a <p> element with the name prop. Give this element a className of \"tile-title\"\r\n    <div className=\"tile-container\">\r\n      \r\n      <p className=\"tile-title\">{name}</p>\r\n      {/* //Iterate over the values in the description object, passed in via props, \r\n      and render a <p> element for each value and give each a className of \"tile\".\r\n      \r\n    You may use the Object.values() method to generate an array of the object’s values and then use map() to iterate over the array\r\n    Use the map() callback to render a <p> element for each of the object’s values. If you used Object.values(),\r\n    use the value’s index as the key for the <p> element */}\r\n\r\n\r\n        {Object.values(description).map((value, index) => {\r\n          <p className=\"tile\">{}</p>\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,IAAI,GAAGA,CAACC,IAAI,EAAEC,WAAW,KAAK;EACzC;IAAA;IAEE;IACAH,OAAA;MAAKI,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAE7BL,OAAA;QAAGI,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEH;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,EASjCC,MAAM,CAACC,MAAM,CAACR,WAAW,CAAC,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAChD,aAAAd,OAAA;UAAGI,SAAS,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO;MAC5B,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACA;AAEV,CAAC;AAACM,EAAA,GApBWd,IAAI;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}