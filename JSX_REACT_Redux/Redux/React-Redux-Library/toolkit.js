

npm install @reduxjs/toolkit

import {createSlice} from '@reduxjs/toolkit';

//with create slice:
//We can write the case reducers as functions inside of an object, instead of having to write a switch/case statement.
//Action creators that correspond to each case reducer function we provide will be automatically generated,
// so we don’t need to worry about defining those ourselves.

/* todosSlice.js */
const options = {
    name: 'todos',
    initialState: [],
    reducers: {
      addTodo: (state, action) => {
        return [
          ...state,
          {
            id: action.payload.id,
            text: action.payload.text,
            completed: false
          }
        ]
      },
      toggleTodo: (state, action) => {
        return state.map(todo =>
          (todo.id === action.payload.id) ? { ...todo, completed: !todo.completed } : todo
        )
      }
    }
   }
    
   const todosSlice = createSlice(options);

   //when we want to access information, we use these arguments (state, action)
////////////////////////////////////////////////////////////////////////////////////////


   // Redux Toolkit’s createSlice() function uses a library called Immer inside of it which helps avoid mistakes of changing an object

   //Immer uses a special JS object called a Proxy to wrap the data you provide and lets you write code that “mutates” that wrapped data.
    // with immer you don't have to use return in the reducer function

    const todosSlice = createSlice({
        name: 'todos',
        initialState: [],
        reducers: {
          addTodo: (state, action) => {
            state.push({ 
              ...action.payload, 
              completed: false 
            })
          },
          toggleTodo: (state, action) => {
            const todo = state.find(todo => todo.id === action.payload.id)
            if (todo) {
              todo.completed = !todo.completed
            }
          }
        }
      })


//DONT FORGET TO EXPORT THE FOLLOWINGS:

//exporting the autogenerated actions
export const { addTodo, toggleTodo, } = todosSlice.actions;
// The actions are autogenerated based on the reducers defined in todosSlice.
export default todosSlice.reducer
//todosSlice.reducer needs to be exported so that it can be passed to the store and be used as the todos slice of state

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

configureStore()
// wraps around the Redux library’s createStore() method and the combineReducers() method,
// and handles most of the store setup for us automatically.

import todosReducer from '.todos/todosSlice';
import filterReducer from '.filter/filterSlice';

const store = configureStore({
  reducer: {
    todos: todosReducer, 
    filter: filterReducer
  }
});

//configureStore() accepts a single configuration object parameter.
// The input object should have a reducer property that is assigned a function to be used as the root reducer,
// or an object of slice reducers which will be combined to create a root reducer. When reducer is an object configureStore(
// will create a root reducer using Redux’s combineReducers()